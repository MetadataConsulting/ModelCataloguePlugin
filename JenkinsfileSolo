
def getRepoURL() {
  sh "mkdir -p .git"
  sh "git config --get remote.origin.url > .git/remote-url"
  return readFile(".git/remote-url").trim()
}
def getCommitSha() {
  sh "mkdir -p .git"
  sh "git rev-parse HEAD > .git/current-commit"
  return readFile(".git/current-commit").trim()
}

def updateGithubCommitStatus(build, String context, String buildUrl, String message, String state) {
  // workaround https://issues.jenkins-ci.org/browse/JENKINS-38674
  repoUrl = getRepoURL()
  commitSha = getCommitSha()
  println "Updating Github Commit Status"
  println "repoUrl $repoUrl"
  println "commitSha $commitSha"
  println "build result: ${build.result}, currentResult: ${build.currentResult}"

  step([
    $class: 'GitHubCommitStatusSetter',
    reposSource: [$class: "ManuallyEnteredRepositorySource", url: repoUrl],
    commitShaSource: [$class: "ManuallyEnteredShaSource", sha: commitSha],
    errorHandlers: [[$class: 'ShallowAnyErrorHandler']],
    contextSource: [$class: "ManuallyEnteredCommitContextSource", context: context],
    statusBackrefSource: [$class: "ManuallyEnteredBackrefSource", backref: buildUrl],

    statusResultSource: [
      $class: 'ConditionalStatusResultSource',
      results: [
        [$class: 'AnyBuildResult', state: state, message: message]
      ]
    ]
  ])
}

def functionalTestBatchReportDirectory="target/functionalTestBatchReportDirectory"

pipeline {
  agent any
  options {
    disableConcurrentBuilds()
  }
  stages {
    stage('Test Execute') {
      steps {

        updateGithubCommitStatus(currentBuild, "continuous-integration/jenkinsSolo", BUILD_URL, "In Progress", "PENDING")
        dir(path: 'ModelCatalogueCorePluginTestApp') {
            // updateGithubCommitStatus(currentBuild, "continuous-integration/jenkinsSolo", BUILD_URL, "Installing Node Modules", "PENDING")
            // sh 'npm install'
            // updateGithubCommitStatus(currentBuild, "continuous-integration/jenkinsSolo", BUILD_URL, "Installing Bower Components", "PENDING")
            // sh 'bower install'
            updateGithubCommitStatus(currentBuild, "continuous-integration/jenkinsSolo", BUILD_URL, "Running Functional Tests", "PENDING")
            sh 'echo $PWD'
            sh "mkdir -p ${functionalTestBatchReportDirectory}"
            wrap([$class: 'Xvfb']) {
              sh "./scripts/testing/runFunctionalTestBatches.sh -testReportDir=${functionalTestBatchReportDirectory} -Dserver.port=8081 -Dgeb.env=chrome -Dwebdriver.chrome.driver=/home/david/Software/Drivers/chromedriver"
            }
            script {
                ALLFAILED = sh (script: "cat ${functionalTestBatchReportDirectory}/allFailed.html", returnStdout: true)
                echo "ALLFAILED: ${ALLFAILED}"
                if (ALLFAILED.contains("Failed Tests")) {
                    error("Some tests failed")
                }
            }

        }
      }
      post {
        always {
            publishHTML(target: [allowMissing: true,
                    alwaysLinkToLastBuild: true,
                    keepAll: true,
                    reportDir: "ModelCatalogueCorePluginTestApp/${functionalTestBatchReportDirectory}",
                    reportFiles: 'allFailed.html',
                    reportName: 'HTML Report',
                    reportTitles: ''])
        }
        failure {
            updateGithubCommitStatus(currentBuild, "continuous-integration/jenkinsSolo", BUILD_URL, "Build Failed.", 'FAILURE')
        }
        success {
            updateGithubCommitStatus(currentBuild, "continuous-integration/jenkinsSolo", BUILD_URL, "Build Success!", 'SUCCESS')
        }
        unstable {
            updateGithubCommitStatus(currentBuild, "continuous-integration/jenkinsSolo", BUILD_URL, "Build Unstable.", 'UNSTABLE')
        }
      }
    }
  }
}
