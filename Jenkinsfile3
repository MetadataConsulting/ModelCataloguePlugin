
def getRepoURL() {
  sh "mkdir -p .git"
  sh "git config --get remote.origin.url > .git/remote-url"
  return readFile(".git/remote-url").trim()
}
def getCommitSha() {
  sh "mkdir -p .git"
  sh "git rev-parse HEAD > .git/current-commit"
  return readFile(".git/current-commit").trim()
}
 
def updateGithubCommitStatus(build, String context, String buildUrl, String message, String state) {
  // workaround https://issues.jenkins-ci.org/browse/JENKINS-38674
  repoUrl = getRepoURL()
  commitSha = getCommitSha()
  println "Updating Github Commit Status" 
  println "repoUrl $repoUrl"
  println "commitSha $commitSha"
  println "build result: ${build.result}, currentResult: ${build.currentResult}"
 
  step([
    $class: 'GitHubCommitStatusSetter',
    reposSource: [$class: "ManuallyEnteredRepositorySource", url: repoUrl],
    commitShaSource: [$class: "ManuallyEnteredShaSource", sha: commitSha],
    errorHandlers: [[$class: 'ShallowAnyErrorHandler']],
    contextSource: [$class: "ManuallyEnteredCommitContextSource", context: context],
    statusBackrefSource: [$class: "ManuallyEnteredBackrefSource", backref: buildUrl],
        
    statusResultSource: [
      $class: 'ConditionalStatusResultSource',
      results: [
        [$class: 'AnyBuildResult', state: state, message: message]
      ]
    ]
  ])
}
pipeline {
  agent any
  options {
    disableConcurrentBuilds()
  }
  stages {
    stage('Test Execute') {
      steps {

        updateGithubCommitStatus(currentBuild, "continuous-integration/jenkins3", BUILD_URL, "In Progress", "PENDING")
        dir(path: 'ModelCatalogueCorePluginTestApp') {
            updateGithubCommitStatus(currentBuild, "continuous-integration/jenkins3", BUILD_URL, "Installing Node Modules", "PENDING")
            sh 'npm install'
            updateGithubCommitStatus(currentBuild, "continuous-integration/jenkins3", BUILD_URL, "Installing Bower Components", "PENDING")
            sh 'bower install'
            updateGithubCommitStatus(currentBuild, "continuous-integration/jenkins3", BUILD_URL, "Running Functional Tests", "PENDING")
            wrap([$class: 'Xvfb']) {
              sh '/opt/grails/bin/grails test-app -Dserver.port=8081 -Dgeb.env=chrome -DdownloadFilepath=/home/ubuntu/download -Dwebdriver.chrome.driver=/opt/chromedriver functional: UserCannotEditReadOnlyDataModelSpec'
		sh '/opt/grails/bin/grails test-app -Dserver.port=8081 -Dgeb.env=chrome -DdownloadFilepath=/home/ubuntu/download -Dwebdriver.chrome.driver=/opt/chromedriver functional: VerifyThatBusinessRulesCanBeCreatedSpec'
		sh '/opt/grails/bin/grails test-app -Dserver.port=8081 -Dgeb.env=chrome -DdownloadFilepath=/home/ubuntu/download -Dwebdriver.chrome.driver=/opt/chromedriver functional: ImportModelAndVerifyTypesSpec'
		sh '/opt/grails/bin/grails test-app -Dserver.port=8081 -Dgeb.env=chrome -DdownloadFilepath=/home/ubuntu/download -Dwebdriver.chrome.driver=/opt/chromedriver functional: CheckLinksAreClickableSpec'
		sh '/opt/grails/bin/grails test-app -Dserver.port=8081 -Dgeb.env=chrome -DdownloadFilepath=/home/ubuntu/download -Dwebdriver.chrome.driver=/opt/chromedriver functional: VerifyBusinessRulesRemainDuringNewVersionCreationSpec'
		sh '/opt/grails/bin/grails test-app -Dserver.port=8081 -Dgeb.env=chrome -DdownloadFilepath=/home/ubuntu/download -Dwebdriver.chrome.driver=/opt/chromedriver functional: LoginWithWrongCredentialSpec'
		sh '/opt/grails/bin/grails test-app -Dserver.port=8081 -Dgeb.env=chrome -DdownloadFilepath=/home/ubuntu/download -Dwebdriver.chrome.driver=/opt/chromedriver functional: CannotAddElementToFinalizedModelSpec'
		sh '/opt/grails/bin/grails test-app -Dserver.port=8081 -Dgeb.env=chrome -DdownloadFilepath=/home/ubuntu/download -Dwebdriver.chrome.driver=/opt/chromedriver functional: CannotAddDataElementsToFinalizedDataModelSpec'
		sh '/opt/grails/bin/grails test-app -Dserver.port=8081 -Dgeb.env=chrome -DdownloadFilepath=/home/ubuntu/download -Dwebdriver.chrome.driver=/opt/chromedriver functional: GrantRoleCuratorSpec'
		sh '/opt/grails/bin/grails test-app -Dserver.port=8081 -Dgeb.env=chrome -DdownloadFilepath=/home/ubuntu/download -Dwebdriver.chrome.driver=/opt/chromedriver functional: VersionVerificationSpec'
		sh '/opt/grails/bin/grails test-app -Dserver.port=8081 -Dgeb.env=chrome -DdownloadFilepath=/home/ubuntu/download -Dwebdriver.chrome.driver=/opt/chromedriver functional: CheckCreateElementFromClassWizardSpec'
		sh '/opt/grails/bin/grails test-app -Dserver.port=8081 -Dgeb.env=chrome -DdownloadFilepath=/home/ubuntu/download -Dwebdriver.chrome.driver=/opt/chromedriver functional: AddAndRemoveManyDataElementsSpec'
		sh '/opt/grails/bin/grails test-app -Dserver.port=8081 -Dgeb.env=chrome -DdownloadFilepath=/home/ubuntu/download -Dwebdriver.chrome.driver=/opt/chromedriver functional: VerifyMinOccursCanBeZeroSpec'
		
            }
        }        
      }
      post {
        always {
            publishHTML(target: [allowMissing: true,
                    alwaysLinkToLastBuild: true,
                    keepAll: true,
                    reportDir: 'ModelCatalogueCorePluginTestApp/target/test-reports',
                    reportFiles: 'html/index.html',
                    reportName: 'HTML Report',
                    reportTitles: ''])
        }      
        failure {
            updateGithubCommitStatus(currentBuild, "continuous-integration/jenkins3", BUILD_URL, "Build Failed.", 'FAILURE')     
        }
        success {
            updateGithubCommitStatus(currentBuild, "continuous-integration/jenkins3", BUILD_URL, "Build Success!", 'SUCCESS')
        }
        unstable {
            updateGithubCommitStatus(currentBuild, "continuous-integration/jenkins3", BUILD_URL, "Build Unstable.", 'UNSTABLE')     
        }
      }
    }        
  }
}