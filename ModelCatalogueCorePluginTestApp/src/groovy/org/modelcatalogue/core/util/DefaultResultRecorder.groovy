package org.modelcatalogue.core.util

import grails.converters.JSON
import org.codehaus.groovy.grails.web.json.JSONElement

class DefaultResultRecorder implements ResultRecorder {

    public static final ResultRecorder NULL_RECOREDER = new ResultRecorder() {
        @Override
        File recordResult(String fixtureName, JSONElement json) {
            return null
        }

        @Override
        File recordInputJSON(String fixtureName, Map json) {
            return null
        }

        @Override
        File recordInputJSON(String fixtureName, String json) {
            return null
        }
    }

    private final String jsonFixturesRoot       // = "../ModelCatalogueCorePlugin/test/js/modelcatalogue/core"
    private final String domainClass
    private String jsonFixturesSuffix   = "gen.fixture.js"

    private DefaultResultRecorder(String jsonFixturesRoot, String domainClass) {
        this(null, jsonFixturesRoot, domainClass)
    }

    @Deprecated
    private DefaultResultRecorder(String xmlFixturesRoot, String jsonFixturesRoot, String domainClass) {
        this.jsonFixturesRoot = jsonFixturesRoot
        this.domainClass = domainClass
    }

    static ResultRecorder create(String jsonRoot, String domainClass) {
        create(null, jsonRoot, domainClass)
    }

    @Deprecated
    static ResultRecorder create(String xmlRoot, String jsonRoot, String domainClass) {
        String domainClassFilter = System.getProperty('record.domain')
        if (domainClassFilter && !(domainClass.matches(domainClassFilter))) {
            return NULL_RECOREDER
        }
        return new DefaultResultRecorder(jsonRoot, domainClass)

    }

    File recordResult(String fixtureName, JSONElement json) {
        File fixtureFile = newFixture(jsonFixturesRoot, "${domainClass}/fixtures", fixtureName, jsonFixturesSuffix)
        fixtureFile.text = getFixtureText(domainClass, fixtureName, new JSON(json).toString(true))
        fixtureFile
    }

    File recordInputJSON(String fixtureName, Map json) {
        File fixtureFile = newFixture(jsonFixturesRoot, "${domainClass}/fixtures", fixtureName, jsonFixturesSuffix)
        fixtureFile.text = getFixtureText(domainClass, fixtureName, new JSON(json).toString(true))
        fixtureFile
    }

    File recordInputJSON(String fixtureName, String json) {
        File fixtureFile = newFixture(jsonFixturesRoot, "${domainClass}/fixtures", fixtureName, jsonFixturesSuffix)
        fixtureFile.text = getFixtureText(domainClass, fixtureName, json)
        fixtureFile

    }


    private static File newFixture(String filePath, prefix, fixtureName, suffix){

        def fixtureFile =  new File("${filePath}/${prefix}/${fixtureName}.${suffix}")
        fixtureFile.parentFile.mkdirs()
        return fixtureFile
    }

    private static String getFixtureText(String domainClass, String fixtureName, String json){
        return """/** Generated automatically from $domainClass. Do not edit this file manually! */
    (function (window) {
        window['fixtures'] = window['fixtures'] || {};
        var fixtures = window['fixtures']
        fixtures['$domainClass'] = fixtures['$domainClass'] || {};
        var $domainClass = fixtures['$domainClass']

        window.fixtures.$domainClass.$fixtureName = $json

    })(window)"""
        }

}
