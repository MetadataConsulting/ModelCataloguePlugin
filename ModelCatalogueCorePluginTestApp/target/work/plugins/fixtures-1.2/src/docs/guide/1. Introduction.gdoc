The fixtures plugin allows you to use a convenient DSL to easily define a graph of persisted domain objects, typically for testing. 

Here's an example...

{code}
class MyTest extends GroovyTestCase {
  
  def fixtureLoader
  
  void testGuillaumeAuthoredGina() {

    def fixture = fixtureLoader.load {
      guillaume(Author, name: "Guillaume Laforge")
      dierk(Author, name: "Dierk Koenig")
      gina(Book, title: "Groovy In Action", authors: [guillaume, dierk])
    }

    assert fixture.guillaume in fixture.gina.authors 

  }
  
}
{code}

The equivalent without using fixtures would be...

{code}
class MyTest extends GroovyTestCase {
  
  void testGuillaumeAuthoredGina() {

    def guillaume = new Author(name: "Guillaume Laforge")
    assert guillaume.save()
    def dierk = new Author(name: "Dierk Konig")
    assert dierk.save()
    def gina = new Book(title: "Groovy In Action")
    gina.addToAuthors(guillaume)
    gina.addToAuthors(dierk)
    assert gina.save()

    assert guillaume in gina.authors 
  }
  
}
{code}


h3. Build-Test-Data integration

A key feature of the plugin is the integration with the "build-test-data plugin":http://www.grails.org/plugin/build-test-data. This excellent plugin takes care of populating required domain properties that you don't care about for you, making your tests more focussed and readable.

If the build-test-data plugin is installed, you can use the @build()@ method on the @fixtureLoader@ to create your instances via the build-test-data's @build()@ method thereby combining the DSL features of the fixtures plugin (i.e. expressing networks of objects) with the convenient instantiation features of build-test-data.

See the section on [build-test-data integration|guide:btd] for more info.
