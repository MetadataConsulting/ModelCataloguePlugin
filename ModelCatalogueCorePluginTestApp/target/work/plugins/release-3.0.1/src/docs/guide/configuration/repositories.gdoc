With tools like [Nexus|http://nexus.sonatype.org/] and [Artifactory|http://www.jfrog.com/products.php], it's pretty easy to set up a Maven-compatible repository these days. Fortunately, it's equally easy to publish Grails plugins and applications to such repositories.

Let's say you have a repository running on your local machine and you want to deploy a plugin to it. Your first step should be to assign the repository a unique ID, such as 'myRepo'. Next, you tell Grails where to find the repository by adding an entry to @BuildConfig.groovy@ specifying its URL:

{code}
grails.project.repos.myRepo.url = "http://localhost:8081/repos"
{code}

The general form of the above configuration option is @grails.project.repos.<repoId>.url@.

{note}
You can not use a repository ID of 'grailsCentral'. That is because it is reserved for the Grails Central Plugin Repository. The good news is that you can configure the username and password for 'grailsCentral' via the options described below.
{note}

You can now deploy artifacts to the repository by passing a @\-\-repository=myRepo@ argument to either the [publish-plugin|commandLine] or [maven-deploy|commandLine] commands. Since you often deploy a plugin or application to the same repository again and again, typing that argument gets a bit laborious, so you can also specify the name of a default repository to deploy to:

{code}
grails.project.repos.default = "myRepo"
{code}

The above configuration option means that a project will be deployed to "myRepo" unless an explicit @\-\-repository@ argument is provided on the command line. You can also pass a value of "grailsCentral" for the command line option or the 'default' config setting to indicate you want to publish to the Grails Central Plugin Repository. Note that the command line option always takes precedence over other settings.

Things become slightly more verbose if you want to provide extra details about the repository. What about user credentials for example? Here's a comprehensive configuration:

{code}
grails.project.repos.myRepo.url = "http://localhost:8081/repos"
grails.project.repos.myRepo.type = "maven"
grails.project.repos.myRepo.username = "admin"
grails.project.repos.myRepo.password = "password"
grails.project.repos.myRepo.portal = "grailsCentral"
{code}

As you can see, even a complete explicit configuration is pretty short. So what do the various entries mean?

* @url@ - the URL to use when connecting to the remote repository. Typically this is HTTP-based, but "svn+ssh" is not uncommon for old-style Subversion plugin repositories.
* @type@ - can be either "maven" or "svn", but the former is the default value so it's rare to explicitly declare a value of "maven" for this option.
* @username@ - the username for connecting to the repository.
* @password@ - the password for connecting to the repository.
* @portal@ - the ID of the plugin portal to notify when publishing a plugin to this repository. Only affects the @publish-plugin@ command.

These settings are common to both Maven-compatible and Subversion repositories - it's only the values that typically differ between them. It's also worth bearing in mind that Subversion repositories can only be used for plugins.

The last option, @portal@, raises the question of how to declare plugin portals. What exactly is meant by a portal ID? The answer lies with portal configuration.
