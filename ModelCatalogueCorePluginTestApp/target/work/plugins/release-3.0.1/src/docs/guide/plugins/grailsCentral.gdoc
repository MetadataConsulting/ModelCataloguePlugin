The most common use case for the @publish-plugin@ command is to publish a public plugin so that it is available to all Grails users; well, to those that have an internet connection at least. Because of this, the command's default configuration is geared towards the Grails Central Plugin Repository. As long as you have a [Grails.org account|http://grails.org/Creating+Plugins], simply installing the Release plugin and executing

{code}
grails publish-plugin
{code}

will do everything necessary to publish the plugin and announce its release. Note however you require prior permission granted in order to publish a particular plugin. See the details on [requesting permission to publish a plugin|http://grails.org/Creating+Plugins] for more information.

During the publishing process you may be asked for your grails.org usernames and passwords, but otherwise that's it. Your plugin will be deployed to the Grails Central Plugin Repository, its plugin portal page on grails.org will be updated, and the release will be announced on various channels such as Twitter (user \@grailsplugins).

It's a pain to enter your username and password every time you publish a plugin, so you can set these for the Grails Central Plugin Repository in @~/.grails/settings.groovy@:

{code}
grails.project.repos.grailsCentral.username = "me"
grails.project.repos.grailsCentral.password = "s0longf!shthanks"
{code}

The above values will be used whenever you publish to the Grails Central Plugin Repository and grails.org.
