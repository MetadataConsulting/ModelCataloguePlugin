<?xml version="1.0" encoding="UTF-8"?><catalogue xmlns="http://www.metadataregistry.org.uk/assets/schema/2.2/metadataregistry.xsd">
    <dataClass name="Locomotive" id="http://www.example.com/models/Locomotive">
        <dataElement name="Factor of Adhesion" id="http://www.example.com/elements/Adhesion">
            <dataType name="Force" id="http://www.example.com/domains/Force">
                <description>A force is a push or pull upon an object resulting from the object's interaction with another object.</description>
                <dataType name="Decimal"
                          id="http://www.example.com/types/Decimal"
                         >
                    <description>A number that uses a decimal point followed by digits that show a value smaller than one.</description>
                </dataType>
                <regex>\d+</regex>
                <measurementUnit name="Newton" id="http://www.example.com/units/Newton" symbol="N">
                    <description>The newton (symbol: N) is the International System of Units (SI) derived unit of force.</description>
                    <extensions>
                        <extension key="From">SI</extension>
                    </extensions>
                </measurementUnit>
            </dataType>
        </dataElement>
        <dataClass name="Engine" id="http://www.example.com/models/Engine">
            <dataElement ref="http://www.example.com/elements/Adhesion">
                <metadata>
                    <extension key="Min. Occurs">0</extension>
                </metadata>
            </dataElement>
            <validationRule name="Locomotives Rules" id="http://www.example.com/rules/LocomotivesRules">
                <component>Southeast Lines</component>
                <ruleFocus>Focus on trains not cars</ruleFocus>
                <trigger>When the new route is planned</trigger>
                <rule>IF something THEN something else</rule>
                <errorCondition>stop doing everytihng</errorCondition>
                <issueRecord>MET-XXXX</issueRecord>
                <notification>trains should go cars should stop</notification>
                <notificationTarget>the conductor</notificationTarget>
                <dataElement ref="http://www.example.com/elements/Adhesion"/>
            </validationRule>
        </dataClass>
    </dataClass>
    <!-- Relationship types are only imported if and only if they are not present in the catalogue yet. Any subsequent changes are ignored! For non-admin users, the types are always imported as system ones and they need to be approved by the catalogue admin first. -->
    <relationshipTypes>
        <relationshipType name="base" source="org.modelcatalogue.core.CatalogueElement" destination="org.modelcatalogue.core.CatalogueElement" versionSpecific="true">
            <sourceToDestination label="is based on">A Catalogue Element can be based on multiple Catalogue Elements of the same type. Value domains will first use rules of the base value domains and then their own when validating input values.</sourceToDestination>
            <destinationToSource label="is base for">A Catalogue Element can be base for multiple Catalogue Elements of the same type.</destinationToSource>
            <rule>isSameClass()</rule>
        </relationshipType>
        <relationshipType name="containment" source="org.modelcatalogue.core.DataClass" destination="org.modelcatalogue.core.DataElement" versionSpecific="true">
            <sourceToDestination label="contains">A Data Class can contain multiple Data Elements. Contained Data Elements are finalized when the Class is finalized.</sourceToDestination>
            <destinationToSource label="contained in">A Data Element can be contained in multiple Data Classes. When a new draft of a Data Element is created, then drafts for all containing Data Classes are created as well.</destinationToSource>
            <rule>String minOccursString = ext['Min Occurs']
                String maxOccursString = ext['Max Occurs']

                Integer minOccurs = minOccursString in ['unbounded', 'null', '*', null, ''] ? 0 : (minOccursString as Integer)
                Integer maxOccurs = maxOccursString in ['unbounded', 'null', '*', null, ''] ? Integer.MAX_VALUE : (maxOccursString as Integer)

                if (minOccurs &lt; 0) {
                return ["relationshipType.containment.min.occurs.less.than.zero", "'Max Occurs' has to be greater than zero"]
                }
                if (maxOccurs &lt; minOccurs) {
                return ["relationshipType.containment.min.occurs.greater.than.max.occurs", "The metadata 'Min Occurs' cannot be greater than 'Min Occurs'"]
                }
                if (maxOccurs &lt; 1) {
                return ["relationshipType.containment.max.occurs.zero", "The metadata 'Max Occurs' must be greater than zero"]
                }

                return true</rule>
        </relationshipType>
        <relationshipType name="hierarchy" source="org.modelcatalogue.core.DataClass" destination="org.modelcatalogue.core.DataClass" versionSpecific="true">
            <sourceToDestination label="parent of">A Class can contain (be parent of) multiple Classes. Child Classes are finalized when parent Class is finalized.</sourceToDestination>
            <destinationToSource label="child of">A Class can be contained (be child Class of) in multiple Classes. When a draft is created for child Class, drafts for parent Classes are created as well.</destinationToSource>
        </relationshipType>
        <relationshipType name="involvedness" source="org.modelcatalogue.core.ValidationRule" destination="org.modelcatalogue.core.DataElement" versionSpecific="true">
            <sourceToDestination label="involves">A Validation Rule can involve multiple Data Elements</sourceToDestination>
            <destinationToSource label="is involved in">A Data Element can be involved in multiple Validation Rules</destinationToSource>
        </relationshipType>
        <relationshipType name="ruleContext" source="org.modelcatalogue.core.ValidationRule" destination="org.modelcatalogue.core.DataClass" versionSpecific="true">
            <sourceToDestination label="applied within context">A Validation rule is applied within the context of a Data Class.</sourceToDestination>
            <destinationToSource label="provides context for">A Data Class can provide the context for multiple validation rules</destinationToSource>
        </relationshipType>
    </relationshipTypes>
</catalogue>
