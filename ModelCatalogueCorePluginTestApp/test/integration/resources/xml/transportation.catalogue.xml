<?xml version="1.0" encoding="UTF-8"?><catalogue xmlns="http://www.metadataregistry.org.uk/assets/schema/2.2/metadataregistry.xsd">
    <dataModel name="Transportation" id="http://www.example.com/datasets/Transportation" semanticVersion="0.0.1" status="DRAFT">
        <policy>CD Policy</policy>
        <dataClass name="Engine" id="http://www.example.com/models/Engine">
            <dataElement name="Factor of Adhesion" id="http://www.example.com/elements/Adhesion">
                <dataType name="Force" id="http://www.example.com/domains/Force">
                    <description>A force is a push or pull upon an object resulting from the object's interaction with another object.</description>
                    <dataType name="Decimal"
                              id="http://www.example.com/types/Decimal"
                             >
                        <description>A number that uses a decimal point followed by digits that show a value smaller than one.</description>
                    </dataType>
                    <regex>\d+</regex>
                    <measurementUnit name="Newton" id="http://www.example.com/units/Newton" symbol="N">
                        <description>The newton (symbol: N) is the International System of Units (SI) derived unit of force.</description>
                        <extensions>
                            <extension key="From">SI</extension>
                        </extensions>
                    </measurementUnit>
                </dataType>
            </dataElement>
        </dataClass>
        <dataClass name="Locomotive" id="http://www.example.com/models/Locomotive">
            <dataElement ref="http://www.example.com/elements/Adhesion"/>
        </dataClass>
    </dataModel>
    <!-- Relationship types are only imported if and only if they are not present in the catalogue yet. Any subsequent changes are ignored! For non-admin users, the types are always imported as system ones and they need to be approved by the catalogue admin first. -->
    <relationshipTypes>
        <relationshipType name="base" source="org.modelcatalogue.core.CatalogueElement" destination="org.modelcatalogue.core.CatalogueElement" versionSpecific="true">
            <sourceToDestination label="is based on">A Catalogue Element can be based on multiple Catalogue Elements of the same type. Value domains will first use rules of the base value domains and then their own when validating input values.</sourceToDestination>
            <destinationToSource label="is base for">A Catalogue Element can be base for multiple Catalogue Elements of the same type.</destinationToSource>
            <rule>isSameClass()</rule>
        </relationshipType>
        <relationshipType name="containment" source="org.modelcatalogue.core.DataClass" destination="org.modelcatalogue.core.DataElement" versionSpecific="true">
            <sourceToDestination label="contains">A Data Class can contain multiple Data Elements. Contained Data Elements are finalized when the Class is finalized.</sourceToDestination>
            <destinationToSource label="contained in">A Data Element can be contained in multiple Data Classes. When a new draft of a Data Element is created, then drafts for all containing Data Classes are created as well.</destinationToSource>
            <rule>String minOccursString = ext['Min Occurs']
                String maxOccursString = ext['Max Occurs']

                Integer minOccurs = minOccursString in ['unbounded', 'null', '*', null, ''] ? 0 : (minOccursString as Integer)
                Integer maxOccurs = maxOccursString in ['unbounded', 'null', '*', null, ''] ? Integer.MAX_VALUE : (maxOccursString as Integer)

                if (minOccurs &lt; 0) {
                return ["relationshipType.containment.min.occurs.less.than.zero", "'Max Occurs' has to be greater than zero"]
                }
                if (maxOccurs &lt; minOccurs) {
                return ["relationshipType.containment.min.occurs.greater.than.max.occurs", "The metadata 'Min Occurs' cannot be greater than 'Min Occurs'"]
                }
                if (maxOccurs &lt; 1) {
                return ["relationshipType.containment.max.occurs.zero", "The metadata 'Max Occurs' must be greater than zero"]
                }

                return true</rule>
        </relationshipType>
        <relationshipType name="declaration" source="org.modelcatalogue.core.DataModel" destination="org.modelcatalogue.core.CatalogueElement" system="true" versionSpecific="true">
            <sourceToDestination label="declares">Data Models can declare multiple Catalogue Elements. Based on this relationship you can narrow the Catalogue Elements shown in the Catalogue using the Data Model filter in the bottom left corner. When Data Model is finalized all defined Elements are finalized as well.</sourceToDestination>
            <destinationToSource label="declared within">A Catalogue Element can be declared within multiple Data Models. When new draft of the Catalogue Element is created then drafts for Data Models are created as well.</destinationToSource>
        </relationshipType>
    </relationshipTypes>
    <!-- Policies are only imported if and only if they are not present in the catalogue yet. Any subsequent changes are ignored! -->
    <dataModelPolicies>
        <dataModelPolicy name="CD Policy">
            <convention>
                <target>dataClass</target>
                <property>name</property>
                <type>required</type>
            </convention>
        </dataModelPolicy>
    </dataModelPolicies>
</catalogue>
