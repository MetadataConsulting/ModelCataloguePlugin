import org.apache.tools.ant.taskdefs.condition.Os

plugins {
    id "com.moowork.node" version "1.1.1"
}

node {
    // Version of node to use.
    version = '5.12.0'

    // Version of npm to use.
    npmVersion = '3.8.6'

    download = true
}

task npmCacheConfig(type: NpmTask, dependsOn: nodeSetup) {
    description = "Configure the NPM cache"
    def npmCacheDir = "${gradle.getGradleUserHomeDir()}/caches/npm"
    outputs.files file(npmCacheDir)
    args = [ 'config', 'set', 'cache', npmCacheDir ]
}

task npmPackages(type: NpmTask, dependsOn: npmCacheConfig) {
    description = "Install Node.js packages"
    args = [ 'install' ]
    // inputs.files file('package.json')
    outputs.files file('node_modules')
}

task bowerInstall(type: NodeTask) {
    description = "Resolves Bower dependencies"
    script = file('node_modules/bower/bin/bower')
    args = ["--config.storage.cache=${gradle.getGradleUserHomeDir()}/caches/bower/cache",
            "--config.storage.packages=${gradle.getGradleUserHomeDir()}/caches/bower/packages",
            "--config.storage.registry=${gradle.getGradleUserHomeDir()}/caches/bower/registry",
            'install']
    // inputs.files file('bower.json')
    outputs.files file('grails-app/assets/bower_components')
    dependsOn npmPackages
}

task cleanUpBowerDependencies(type: Delete) {
    delete 'grails-app/assets/bower_components/ace-builds/demo'
    delete 'grails-app/assets/bower_components/ace-builds/src'
    delete 'grails-app/assets/bower_components/ace-builds/src-min'
    delete 'grails-app/assets/bower_components/ace-builds/src-noconflict'
    delete 'grails-app/assets/bower_components/ace-builds/textarea'
    delete 'grails-app/assets/bower_components/angular-file-saver/gulpfile.babel.js'
    delete 'grails-app/assets/bower_components/angular-file-saver/src'
    delete 'grails-app/assets/bower_components/angular-file-saver/docs'
    delete 'grails-app/assets/bower_components/sly-repeat/scripts'
    delete 'grails-app/assets/bower_components/sly-repeat/src'
}

task cleanIdeaFiles(type: Delete) {
    delete '**/.idea'
    delete '**/*.iml'
}

task runDev(type: Exec, dependsOn: bowerInstall) {
    description = "Run MX in development environment"

    assertJava8()
    environment 'GRAILS_OPTS', "-Xmx1G -Xms512m -XX:MaxPermSize=512m -server"

    def cmds = [grailsw]

    if (project.hasProperty('mc.blank')) {
        environment 'MC_BLANK_DEV', "true"
    }

    if (project.hasProperty('mc.war')) {
        cmds << 'run-war'
    } else {
        cmds << 'run-app'
    }

    if (project.hasProperty('mc.debug')) {
        cmds << '--debug-fork'
    }
    commandLine cmds
}

task ensureProductionConfig(type: Copy) {
    description = "Ensures configuration for MX production environment exists"
    onlyIf {
        !new File(new File(System.getProperty('user.home'), '.grails'), 'mc-config.groovy').exists()
    }
    from('grails-app/conf/mc-config.groovy.example') {
        include 'mc-config.groovy.example'
    }
    rename 'mc-config\\.groovy\\.example', 'mc-config.groovy'
    into "${System.getProperty('user.home')}/.grails"
}

task runProd(type: Exec, dependsOn: [bowerInstall, ensureProductionConfig]) {
    description = "Run MX in production environment"

    assertJava8()
    environment 'GRAILS_OPTS', "-Xmx2G -Xms1G -XX:MaxPermSize=1G -server"

    def cmds = [grailsw, 'prod']

    if (project.hasProperty('mc.war')) {
        cmds << 'run-war'
    } else {
        cmds << 'run-app'
    }

    if (project.hasProperty('mc.debug')) {
        cmds << '--debug-fork'
    }

    if (project.hasProperty('mc.search.elasticsearch.host')) {
        cmds << "-Dmc.search.elasticsearch.host=${project.getProperty('mc.search.elasticsearch.host')}"
    }

    if (project.hasProperty('mc.config.location')) {
        cmds << "-Dmc.config.location=${project.getProperty('mc.config.location')}"
    }

    commandLine cmds
}

task stop(type: Exec) {
    description = "Stops running MX application"

    commandLine grailsw, 'stop-app'
}


bowerInstall.finalizedBy cleanUpBowerDependencies


private static String getGrailsw()  {
   if (Os.isFamily(Os.FAMILY_WINDOWS))  {
      return "grailsw.bat"
   }
    return "./grailsw"
}

private static void assertJava8()  {
    assert org.gradle.internal.jvm.Jvm.current().javaVersion.java8Compatible
}
