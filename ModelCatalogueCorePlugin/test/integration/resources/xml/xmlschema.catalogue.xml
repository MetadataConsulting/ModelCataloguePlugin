<?xml version="1.0" encoding="UTF-8"?>
<catalogue xmlns="http://www.metadataregistry.org.uk/assets/schema/1.1.1/metadataregistry.xsd">
    <classification name="XMLSchema" id="http://www.w3.org/2001/XMLSchema">
        <description>XML Schema provides standard types for describing your own XML formats</description>
        <valueDomain name="xs:boolean" id="http://www.w3.org/2001/XMLSchema#boolean">
            <description>Binary-valued logic legal literals</description>
            <dataType name="xs:boolean" id="http://localhost/catalogue/enumeratedType/43.1">
                <description>Binary-valued logic legal literals</description>
                <enumerations>
                    <enumeration value="0">False</enumeration>
                    <enumeration value="1">True</enumeration>
                    <enumeration value="false">False</enumeration>
                    <enumeration value="true">True</enumeration>
                </enumerations>
            </dataType>
        </valueDomain>
        <valueDomain name="xs:base64Binary" id="http://www.w3.org/2001/XMLSchema#base64Binary">
            <description>Base64-encoded arbitrary binary data</description>
            <regex>[a-zA-Z0-9=]*</regex>
            <dataType name="xs:base64Binary" id="http://localhost/catalogue/dataType/45.1">
                <description>Base64-encoded arbitrary binary data</description>
            </dataType>
        </valueDomain>
        <valueDomain name="xs:hexBinary" id="http://www.w3.org/2001/XMLSchema#hexBinary">
            <description>Arbitrary hex-encoded binary data. Example, "0FB7" is a hex encoding for 16-bit int 4023 (binary 111110110111).</description>
            <regex>[a-fA-F0-9]*</regex>
            <dataType name="xs:hexBinary" id="http://localhost/catalogue/dataType/47.1">
                <description>Arbitrary hex-encoded binary data. Example, "0FB7" is a hex encoding for 16-bit int 4023 (binary 111110110111).</description>
            </dataType>
        </valueDomain>
        <valueDomain name="xs:anyURI" id="http://www.w3.org/2001/XMLSchema#anyURI">
            <description>A Uniform Resource Identifier Reference (URI). Can be absolute or relative, and may have an optional fragment identifier.</description>
            <rule>is URI</rule>
            <dataType name="xs:anyURI" id="http://localhost/catalogue/dataType/49.1">
                <description>A Uniform Resource Identifier Reference (URI). Can be absolute or relative, and may have an optional fragment identifier.</description>
            </dataType>
        </valueDomain>
        <valueDomain name="xs:string" id="http://www.w3.org/2001/XMLSchema#string">
            <description>Character strings in XML.</description>
            <rule>import static javax.xml.bind.DatatypeConverter.*

                true &amp;&amp; (x = parseString(string(x)))</rule>
            <dataType name="xs:string" id="http://localhost/catalogue/dataType/51.1">
                <description>Character strings in XML.</description>
            </dataType>
        </valueDomain>
        <valueDomain name="xs:normalizedString" id="http://www.w3.org/2001/XMLSchema#normalizedString">
            <description>White space normalized strings</description>
            <basedOn ref="http://www.w3.org/2001/XMLSchema#string"/>
            <rule>!(x =~ /[\r\n\t]/)</rule>
            <dataType name="xs:string"/>
        </valueDomain>
        <valueDomain name="xs:token" id="http://www.w3.org/2001/XMLSchema#token">
            <description>Tokenized strings.</description>
            <basedOn ref="http://www.w3.org/2001/XMLSchema#normalizedString"/>
            <rule>!(x =~ /\s+/)</rule>
            <dataType name="xs:string"/>
        </valueDomain>
        <valueDomain name="xs:language" id="http://www.w3.org/2001/XMLSchema#language">
            <description>Tokenized strings.</description>
            <basedOn ref="http://www.w3.org/2001/XMLSchema#token"/>
            <rule>maxLength(2) &amp;&amp; new Locale(x)</rule>
            <dataType name="xs:string"/>
        </valueDomain>
        <valueDomain name="xs:decimal" id="http://www.w3.org/2001/XMLSchema#decimal">
            <description>Arbitrary precision decimal numbers. Sign omitted, “+” is assumed. Leading and trailing zeroes are optional. If the fractional part is zero, the period and following zero(es) can be omitted.</description>
            <rule>import static javax.xml.bind.DatatypeConverter.*

                parseDecimal(string(x)) in BigDecimal</rule>
            <dataType name="xs:decimal" id="http://localhost/catalogue/dataType/56.1">
                <description>Arbitrary precision decimal numbers. Sign omitted, “+” is assumed. Leading and trailing zeroes are optional. If the fractional part is zero, the period and following zero(es) can be omitted.</description>
            </dataType>
        </valueDomain>
        <valueDomain name="xs:double" id="http://www.w3.org/2001/XMLSchema#double">
            <description>Double-precision 64-bit floating point type legal literals {0, -0, INF, -INF and NaN} Example, -1E4, 12.78e-2, 12 and INF</description>
            <rule>import static javax.xml.bind.DatatypeConverter.*

                parseDouble(string(x)) in Double</rule>
            <dataType name="xs:double" id="http://localhost/catalogue/dataType/58.1">
                <description>Double-precision 64-bit floating point type legal literals {0, -0, INF, -INF and NaN} Example, -1E4, 12.78e-2, 12 and INF</description>
            </dataType>
        </valueDomain>
        <valueDomain name="xs:float" id="http://www.w3.org/2001/XMLSchema#float">
            <description>Double-precision 32-bit floating point type legal literals {0, -0, INF, -INF and NaN} Example, -1E4, 12.78e-2, 12 and INF</description>
            <rule>import static javax.xml.bind.DatatypeConverter.*

                parseFloat(string(x)) in Float</rule>
            <dataType name="xs:float" id="http://localhost/catalogue/dataType/60.1">
                <description>Double-precision 32-bit floating point type legal literals {0, -0, INF, -INF and NaN} Example, -1E4, 12.78e-2, 12 and INF</description>
            </dataType>
        </valueDomain>
        <valueDomain name="xs:integer" id="http://www.w3.org/2001/XMLSchema#integer">
            <description>Integer or whole numbers - Sign omitted, “+” is assumed. Example: -1, 0, 12678967543233, +100000</description>
            <basedOn ref="http://www.w3.org/2001/XMLSchema#decimal"/>
            <rule>import static javax.xml.bind.DatatypeConverter.*

                parseInteger(string(x)) in BigInteger</rule>
            <dataType name="xs:decimal"/>
        </valueDomain>
        <valueDomain name="xs:byte" id="http://www.w3.org/2001/XMLSchema#byte">
            <description>127 to-128. Sign is omitted, “+” assumed. Example: -1, 0, 126, +100.</description>
            <rule>import static javax.xml.bind.DatatypeConverter.*

                parseByte(string(x)) in Byte</rule>
            <dataType name="xs:byte" id="http://localhost/catalogue/dataType/63.1">
                <description>127 to-128. Sign is omitted, “+” assumed. Example: -1, 0, 126, +100.</description>
            </dataType>
        </valueDomain>
        <valueDomain name="xs:int" id="http://www.w3.org/2001/XMLSchema#int">
            <description>2147483647 to -2147483648. Sign omitted, “+” is assumed. Example: -1, 0, 126789675, +100000.</description>
            <rule>import static javax.xml.bind.DatatypeConverter.*

                parseInt(string(x)) in Integer</rule>
            <dataType name="xs:int" id="http://localhost/catalogue/dataType/65.1">
                <description>2147483647 to -2147483648. Sign omitted, “+” is assumed. Example: -1, 0, 126789675, +100000.</description>
            </dataType>
        </valueDomain>
        <valueDomain name="xs:long" id="http://www.w3.org/2001/XMLSchema#long">
            <description>9223372036854775807 to -9223372036854775808. Sign omitted, “+” assumed. Example: -1, 0, 12678967543233, +100000.</description>
            <basedOn ref="http://www.w3.org/2001/XMLSchema#integer"/>
            <rule>import static javax.xml.bind.DatatypeConverter.*

                parseLong(string(x)) in Long</rule>
            <dataType name="xs:decimal"/>
        </valueDomain>
        <valueDomain name="xs:negativeInteger" id="http://www.w3.org/2001/XMLSchema#negativeInteger">
            <description>Infinite set {...,-2,-1}. Example: -1, -12678967543233, -100000</description>
            <rule>maxExclusive(0)</rule>
            <dataType name="xs:negativeInteger" id="http://localhost/catalogue/dataType/68.1">
                <description>Infinite set {...,-2,-1}. Example: -1, -12678967543233, -100000</description>
            </dataType>
        </valueDomain>
        <valueDomain name="xs:nonNegativeInteger" id="http://www.w3.org/2001/XMLSchema#nonNegativeInteger">
            <description>Infinite set {0, 1, 2,...}. Sign omitted, “+” assumed. Example: 1, 0, 12678967543233, +100000.</description>
            <basedOn ref="http://www.w3.org/2001/XMLSchema#integer"/>
            <rule>minInclusive(0)</rule>
            <dataType name="xs:decimal"/>
        </valueDomain>
        <valueDomain name="xs:nonPositiveInteger" id="http://www.w3.org/2001/XMLSchema#nonPositiveInteger">
            <description>Infinite set {...,-2,-1,0}. Example: -1, 0, -126733, -100000.</description>
            <basedOn ref="http://www.w3.org/2001/XMLSchema#integer"/>
            <rule>maxInclusive(0)</rule>
            <dataType name="xs:decimal"/>
        </valueDomain>
        <valueDomain name="xs:positiveInteger" id="http://www.w3.org/2001/XMLSchema#positiveInteger">
            <description>Infinite set {1, 2,...}. Optional “+” sign,. Example: 1, 12678967543233, +100000.</description>
            <basedOn ref="http://www.w3.org/2001/XMLSchema#nonNegativeInteger"/>
            <rule>minExclusive(0)</rule>
            <dataType name="xs:decimal"/>
        </valueDomain>
        <valueDomain name="xs:short" id="http://www.w3.org/2001/XMLSchema#short">
            <description>32767 to -32768. Sign omitted, “+” assumed. Example: -1, 0, 12678, +10000.</description>
            <basedOn ref="http://www.w3.org/2001/XMLSchema#int"/>
            <rule>import static javax.xml.bind.DatatypeConverter.*

                parseShort(string(x)) in Short</rule>
            <dataType name="xs:int"/>
        </valueDomain>
        <valueDomain name="xs:unsignedByte" id="http://www.w3.org/2001/XMLSchema#unsignedByte">
            <description>0 to 255. a finite-length Example: 0, 126, 100.</description>
            <rule>minInclusive(0) &amp;&amp; maxInclusive(255)</rule>
            <dataType name="xs:unsignedByte" id="http://localhost/catalogue/dataType/74.1">
                <description>0 to 255. a finite-length Example: 0, 126, 100.</description>
            </dataType>
        </valueDomain>
        <valueDomain name="xs:unsignedInt" id="http://www.w3.org/2001/XMLSchema#unsignedInt">
            <description>0 to 4294967295</description>
            <rule>minInclusive(0) &amp;&amp; maxInclusive(4294967295)</rule>
            <dataType name="xs:unsignedInt" id="http://localhost/catalogue/dataType/76.1">
                <description>0 to 4294967295</description>
            </dataType>
        </valueDomain>
        <valueDomain name="xs:unsignedLong" id="http://www.w3.org/2001/XMLSchema#unsignedLong">
            <description>0 to 18446744073709551615. Example: 0, 12678967543233, 100000.</description>
            <rule>minInclusive(0) &amp;&amp; maxInclusive(18446744073709551615)</rule>
            <dataType name="xs:unsignedLong" id="http://localhost/catalogue/dataType/78.1">
                <description>0 to 18446744073709551615. Example: 0, 12678967543233, 100000.</description>
            </dataType>
        </valueDomain>
        <valueDomain name="xs:unsignedShort" id="http://www.w3.org/2001/XMLSchema#unsignedShort">
            <description>0 to 65535. Example: 0, 12678, 10000.</description>
            <basedOn ref="http://www.w3.org/2001/XMLSchema#unsignedInt"/>
            <rule>minInclusive(0) &amp;&amp; maxInclusive(65535)</rule>
            <dataType name="xs:unsignedInt"/>
        </valueDomain>
        <valueDomain name="xs:date" id="http://www.w3.org/2001/XMLSchema#date">
            <description>Calendar date.Format YYYY-MM-DD. Example, May the 31st, 1999 is: 1999-05-31.</description>
            <rule>import static javax.xml.bind.DatatypeConverter.*

                parseDateTime(string(x)) in Calendar</rule>
            <dataType name="xs:date" id="http://localhost/catalogue/dataType/81.1">
                <description>Calendar date.Format YYYY-MM-DD. Example, May the 31st, 1999 is: 1999-05-31.</description>
            </dataType>
        </valueDomain>
        <valueDomain name="xs:dateTime" id="http://www.w3.org/2001/XMLSchema#dateTime">
            <description>Specific instant of time. ISO 8601 extended format YYYY-MM-DDThh:mm:ss. Example, to indicate 1:20 pm on May the 31st, 1999 for Eastern Standard Time which is 5 hours behind Coordinated Universal Time (UTC): 1999-05-31T13:20:00-05:00.</description>
            <rule>import static javax.xml.bind.DatatypeConverter.*

                parseDateTime(string(x)) in Calendar</rule>
            <dataType name="xs:dateTime" id="http://localhost/catalogue/dataType/83.1">
                <description>Specific instant of time. ISO 8601 extended format YYYY-MM-DDThh:mm:ss. Example, to indicate 1:20 pm on May the 31st, 1999 for Eastern Standard Time which is 5 hours behind Coordinated Universal Time (UTC): 1999-05-31T13:20:00-05:00.</description>
            </dataType>
        </valueDomain>
        <valueDomain name="xs:time" id="http://www.w3.org/2001/XMLSchema#time">
            <description>An instant of time that recurs every day. Example, 1:20 pm for Eastern Standard Time which is 5 hours behind Coordinated Universal Time (UTC), write: 13:20:00-05:00.</description>
            <rule>import static javax.xml.bind.DatatypeConverter.*

                parseTime(string(x)) in Calendar</rule>
            <dataType name="xs:time" id="http://localhost/catalogue/dataType/85.1">
                <description>An instant of time that recurs every day. Example, 1:20 pm for Eastern Standard Time which is 5 hours behind Coordinated Universal Time (UTC), write: 13:20:00-05:00.</description>
            </dataType>
        </valueDomain>
        <valueDomain name="xs:duration" id="http://www.w3.org/2001/XMLSchema#duration">
            <description>A duration of time. ISO 8601 extended format PnYnMnDTnHnMnS. Example, to indicate duration of 1 year, 2 months, 3 days, 10 hours, and 30 minutes: P1Y2M3DT10H30M. One could also indicate a duration of minus 120 days as: -P120D.</description>
            <regex>-?P\d+Y(\d+M(\d+D(T\d+H(\d+M(\d+S)?)?)?)?)?</regex>
            <dataType name="xs:duration" id="http://localhost/catalogue/dataType/87.1">
                <description>A duration of time. ISO 8601 extended format PnYnMnDTnHnMnS. Example, to indicate duration of 1 year, 2 months, 3 days, 10 hours, and 30 minutes: P1Y2M3DT10H30M. One could also indicate a duration of minus 120 days as: -P120D.</description>
            </dataType>
        </valueDomain>
        <valueDomain name="xs:gDay" id="http://www.w3.org/2001/XMLSchema#gDay">
            <description>Gregorian day. Example a day such as the 5th of the month is 05.</description>
            <rule>date("dd") in Date</rule>
            <dataType name="xs:gDay" id="http://localhost/catalogue/dataType/89.1">
                <description>Gregorian day. Example a day such as the 5th of the month is 05.</description>
            </dataType>
        </valueDomain>
        <valueDomain name="xs:gMonth" id="http://www.w3.org/2001/XMLSchema#gMonth">
            <description>Gregorian month. Example: May is 05.</description>
            <rule>date("MM") in Date</rule>
            <dataType name="xs:gMonth" id="http://localhost/catalogue/dataType/91.1">
                <description>Gregorian month. Example: May is 05.</description>
            </dataType>
        </valueDomain>
        <valueDomain name="xs:gMonthDay" id="http://www.w3.org/2001/XMLSchema#gMonthDay">
            <description>Gregorian specific day in a month. Example: Feb 5 is 02-05.</description>
            <rule>date("MM-dd") in Date</rule>
            <dataType name="xs:gMonthDay" id="http://localhost/catalogue/dataType/93.1">
                <description>Gregorian specific day in a month. Example: Feb 5 is 02-05.</description>
            </dataType>
        </valueDomain>
        <valueDomain name="xs:gYear" id="http://www.w3.org/2001/XMLSchema#gYear">
            <description>Gregorian calendar year. Example, year 1999, write: 1999.</description>
            <rule>date("yyyy") in Date</rule>
            <dataType name="xs:gYear" id="http://localhost/catalogue/dataType/95.1">
                <description>Gregorian calendar year. Example, year 1999, write: 1999.</description>
            </dataType>
        </valueDomain>
        <valueDomain name="xs:gYearMonth" id="http://www.w3.org/2001/XMLSchema#gYearMonth">
            <description>Specific gregorian month and year. Example, May 1999, write: 1999-05.</description>
            <rule>date("yyyy-MM") in Date</rule>
            <dataType name="xs:gYearMonth" id="http://localhost/catalogue/dataType/97.1">
                <description>Specific gregorian month and year. Example, May 1999, write: 1999-05.</description>
            </dataType>
        </valueDomain>
        <valueDomain name="xs:QName" id="http://www.w3.org/2001/XMLSchema#QName">
            <description>QName represents XML qualified names. The value space of QName is the set of tuples {namespace name, local part}, where namespace name is an anyURI and local part is an NCName.</description>
            <dataType name="xs:QName" id="http://localhost/catalogue/dataType/99.1">
                <description>QName represents XML qualified names. The value space of QName is the set of tuples {namespace name, local part}, where namespace name is an anyURI and local part is an NCName.</description>
            </dataType>
        </valueDomain>
        <valueDomain name="xs:NOTATION" id="http://www.w3.org/2001/XMLSchema#NOTATION">
            <description>NOTATION represents the NOTATION attribute type from [XML 1.0 (Second Edition)]. The value space of NOTATION is the set of QNames of notations declared in the current schema.</description>
            <dataType name="xs:NOTATION" id="http://localhost/catalogue/dataType/101.1">
                <description>NOTATION represents the NOTATION attribute type from [XML 1.0 (Second Edition)]. The value space of NOTATION is the set of QNames of notations declared in the current schema.</description>
            </dataType>
        </valueDomain>
    </classification>
</catalogue>