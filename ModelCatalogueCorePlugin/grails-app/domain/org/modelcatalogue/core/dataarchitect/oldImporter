package org.modelcatalogue.core.dataarchitect

import org.modelcatalogue.core.ConceptualDomain
import org.modelcatalogue.core.DataElement
import org.modelcatalogue.core.DataType
import org.modelcatalogue.core.EnumeratedType
import org.modelcatalogue.core.MeasurementUnit
import org.modelcatalogue.core.Model
import org.modelcatalogue.core.PublishedElementStatus
import org.modelcatalogue.core.ValueDomain
import org.modelcatalogue.core.util.marshalling.EnumeratedTypeMarshaller

class Importer {

    def publishedElementService

    private static final QUOTED_CHARS = ["\\": "&#92;", ":": "&#58;", "|": "&#124;", "%": "&#37;"]

    //TODO replace this with a call to the published element domain class constraint for model catalogue id directly
    private static final REGEX = '(?i)MC_([A-Z0-9]{8}-[A-Z0-9]{4}-[A-Z0-9]{4}-[A-Z0-9]{4}-[A-Z0-9]{12})_\\d+'

    Collection<ImportRow> pendingAction = []
    Collection<ImportRow> importQueue = []
    Collection<ImportRow> imported = []
    Collection<Integer> modelIds = []
    ArrayList<Model> parentModels

    static constraints = {
        imported nullable: true
        pendingAction nullable: true
        importQueue nullable: true
    }

    def void addParentModels(ArrayList modelPath, ConceptualDomain conceptualDomain){

        // or with a loop
        modelPath = modelPath.reverse()
        for (Iterator<?> it = modelPath.iterator(); it.hasNext(); ) {
            def
            it.next()
            it.remove()
        }

    }

    def void addAll(Collection<ImportRow> rows) {
        rows.each { ImportRow row ->
            addRow(row)
        }
    }

    def void addRow(ImportRow row) {
        row = validateRow(row)
        (row.rowActions) ? pendingAction.add(row) : importQueue.add(row)
    }

    def void ingestImportQueue() {
        def queue = importQueue.iterator()
        while (queue.hasNext()) {
            ImportRow row = queue.next()
            if (!row.rowActions) {
                ingestRow(row)
                queue.remove()
            }
        }
    }

    def void actionPendingModels() {
        modelIds.each { modelId ->
            def model = Model.get(modelId)
            def pendingDataElements = model.contains.findAll { it.status == PublishedElementStatus.PENDING }
            if (pendingDataElements) {
                def archivedModel = publishedElementService.archiveAndIncreaseVersion(model)
                model.refresh()
                pendingDataElements.each { DataElement dataElement ->
                    archivedModel.removeFromContains(dataElement)
                    archivedModel.addToContains(dataElement.supersedes.first())
                    archivedModel.save()
                    model.removeFromContains(dataElement.supersedes.first())
                    model.save()
                    dataElement.status = PublishedElementStatus.FINALIZED
                    dataElement.save()
                }
            }
            model.status = PublishedElementStatus.FINALIZED
            model.save(failOnError:true)
        }
    }


    def void ingestRow(ImportRow row) {
        def conceptualDomain, model, dataType, measurementUnit
        dataType = (row.dataType)?importDataType(row.dataElementName, row.dataType):null
        conceptualDomain = importConceptualDomain(row.conceptualDomainName, row.conceptualDomainDescription)
        model = importModels(row.parentModelCode, row.parentModelName, row.containingModelCode, row.containingModelName, conceptualDomain)
        measurementUnit = importMeasurementUnit([name: row.measurementUnitName, symbol: row.measurementSymbol])
        if (dataType) {
            importDataElement([name: row.dataElementName, description: row.dataElementDescription, modelCatalogueId: row.dataElementCode], row.metadata, model, [name: row.dataElementName.replaceAll("\\s", "_"), description: row.dataType.toString().take(2000), dataType: dataType, measurementUnit: measurementUnit], conceptualDomain)
        } else {
            importDataElement([name: row.dataElementName, description: row.dataElementDescription, modelCatalogueId: row.dataElementCode], row.metadata, model)
        }
    }




    def importMeasurementUnit(Map params) {
        MeasurementUnit mu
        if(params.name && params.symbol) {
            mu = MeasurementUnit.findByNameAndSymbol(params.name, params.symbol)
        }else {
            if (!mu) {
                //TODO: need to create an action i.e. is this the unit?
                mu = MeasurementUnit.findBySymbol(params.symbol)
            }
            if (!mu) {
                //TODO: need to create an action i.e. is this the unit?
                mu = MeasurementUnit.findByNameIlike(params.name)
            }
        }
//TODO: do you want to create a new measurement unit?
//        if (!mu) { mu = new MeasurementUnit(params).save() }

        return mu
    }


    def importConceptualDomain(String name, String description) {
        name = name.trim()
        ConceptualDomain conceptualDomain = ConceptualDomain.findByName(name)
        //TODO: is this the conceptual domain you want to use
        //if (!conceptualDomain) { conceptualDomain = ConceptualDomain.findByNameIlike(name)}

        //TODO: do you want to create a new conceptual domain
        if (!conceptualDomain) { conceptualDomain = new ConceptualDomain(name: name, description: description).save() }
        return conceptualDomain
    }


    def importModels(String parentCode, String parentName, String modelCode, String modelName, ConceptualDomain conceptualDomain) {
        if (parentCode) { parentCode = parentCode.trim() }
        if (modelCode) { modelCode = modelCode.trim() }
        if (parentName) { parentName = parentName.trim() }
        if (modelName) { modelName = modelName.trim() }
        Model model = Model.findByModelCatalogueId(modelCode)
        Model parentModel = Model.findByModelCatalogueId(parentCode)
        ArrayList modelPath = []
        if(parentModels){modelPath.addAll(parentModels)}
        modelPath.add(parentName)
        modelPath.add(modelName)
        //TODO return a row action
        //if there are no models then try to match the model using the parentChild path to the model and the name of the model
        if (!model || !parentModel) {
            model = matchOrCreateModel(modelPath, [name: parentName, modelCatalogueId: (parentCode) ? parentCode : null], [name: modelName, modelCatalogueId: (modelCode) ? modelCode : null], conceptualDomain)
        } else {
            model = addModelToImport(model)
            parentModel = addModelToImport(parentModel)
            model.addToChildOf(parentModel)
        }
        return model
    }


    protected Model addModelToImport(Model model) {
        if (!modelIds.contains(model.id)) {
            model.status = PublishedElementStatus.PENDING
            model.save()
            modelIds.add(model.id)
        }
        return model
    }

    protected matchModelByPathAndConceptualDomain(Model model, ArrayList path, ConceptualDomain conceptualDomain){
        def match = false
        for(parentName in path.reverse()){
            model = model.childOf.collect { it.name }.contains(parentName)
            if(model && model.hasContextOf.contains(conceptualDomain)){
                match = true
            }else{
                match = false
                break
            }
        }
        return match
    }

    protected findModelByNameAndPathAndConceptualDomain(String modelName, ArrayList path, ConceptualDomain conceptualDomain){
        def match, namedChildren, parentName, matchPath
        namedChildren  = Model.findAllByName(modelName)
        if(path.size()>0 && namedChildren.size()>0) {
            namedChildren.each { Model childModel ->
                if (matchModelByPathAndConceptualDomain(childModel, path, conceptualDomain) && childModel.hasContextOf.contains(conceptualDomain)) {
                    match = childModel
                }
            }

        }else if(path.size==0 && namedChildren.size()>0){
            //this applies to top level models i.e. there is no path for them
            namedChildren.each { Model childModel ->
                if (childModel.hasContextOf.contains(conceptualDomain)) {
                    match = childModel
                }
            }
        }
        return match
    }

    protected matchOrCreateModel(ArrayList modelPath, Map parentParams, Map modelParams, ConceptualDomain conceptualDomain) {

        //the final model we want to return i.e. the containing model
        Model modelToReturn
        def matchChild = null
        def matchParent = null

        //try to match the parent model using catalogue id
        matchParent = Model.findByModelCatalogueId(parentParams.modelCatalogueId)
        //try to match model using name and parent name
        if(!matchParent){ matchParent = findModelByNameAndPathAndConceptualDomain(parentParams.name, modelPath, conceptualDomain) }

        if(!matchParent && parentParams.name){

        }

        matchChild = Model.findByModelCatalogueId(modelParams.modelCatalogueId)


//        if(!matchChild){
//            //either there is a child and we have to find it by the parent or the path to the parent
//            if(!matchParent){
//
//            }else{
//
//            }
//
//            //or there is no child so we need to create one
//
//
//        }else{
//
//
//
//        }


        //iterate through the model path i.e. ANIMAL - MAMMAL - DOG - POODLE and create models for each of these if they don't exist,
        // otherwise find them and create a parentChild relationship
        modelPath.inject { String parentName, String childName ->
            def namedChildren = []

            //if there isn't a name for the child return the parentName
            if(parentName){ parentName = parentName.trim() }
            if(childName){ childName = childName.trim() }
            matchChild = Model.findByModelCatalogueId(modelParams.modelCatalogueId)
            if(!matchChild) {
                namedChildren = Model.findAllByName(childName)
                namedChildren.each { Model childModel ->
                    if (childModel.childOf.collect {
                        it.name
                    }.contains(parentName) && childModel.hasContextOf.contains(conceptualDomain)) {
                        matchChild = childModel
                    }
                }
            }
            //if there isn't a matching model with the same name and parentName
            if (!matchChild) {
                def child, parent
                //create the child model
                if (modelParams.name == childName) { child = new Model(modelParams).save(failOnError: true) }
                //else if (parentParams.name == childName) { child = new Model(parentParams).save(failOnError: true) }
                else if (childName){ child = new Model('name': childName).save(failOnError: true) }

                if(child) {
                    child.addToHasContextOf(conceptualDomain)
                    child = addModelToImport(child)
                    modelToReturn = child
                }

                //see if the parent model exists
                parent = Model.findByModelCatalogueId(parentParams.modelCatalogueId)
                if(!parent) {
                    def namedParents = Model.findAllByName(parentName)
                    namedParents.each { Model p ->
                        if (p.hasContextOf.contains(conceptualDomain)) {
                            parent = p
                        }
                    }
                }
                //create the parent model
                if (!parent && parentName) {
                    if (parentParams.name == parentName) { parent = new Model(parentParams).save() }
                    else { parent = new Model('name': parentName).save() }
                }

                if(parent) {
                    parent.addToHasContextOf(conceptualDomain)
                    child.addToChildOf(parent)
                    parent = addModelToImport(parent)
                }

                return child.name

            } else {

                matchChild = addModelToImport(matchChild)
                modelToReturn = matchChild
                return matchChild.name

            }
        }

        modelToReturn

    }




    private ImportRow validateRow(ImportRow row) {

        if (!row.dataElementName) {
            RowAction action = new RowAction(field: "dataElementName", action: "please enter data element name to import row", actionType: ActionType.RESOLVE_ERROR)
            row.rowActions.add(action)
        }

        if (!row.conceptualDomainName) {
            RowAction action = new RowAction(field: "conceptualDomainName", action: "please enter conceptual domain name to import row", actionType: ActionType.RESOLVE_ERROR)
            row.rowActions.add(action)
        }

        if (!row.containingModelName) {
            RowAction action = new RowAction(field: "containingModelName", action: "please complete the containing model name to import row", actionType: ActionType.RESOLVE_ERROR)
            row.rowActions.add(action)
        }

        if (row.dataElementCode) {
            if (!row.dataElementCode.matches(REGEX)) {
                RowAction action = new RowAction(field: "dataElementCode", action: "the model catalogue code for the data element is invalid, please action to import row", actionType: ActionType.RESOLVE_ERROR)
                row.rowActions.add(action)
            }
        }

        if (row.containingModelCode) {
            if (!row.containingModelCode.matches(REGEX)) {
                RowAction action = new RowAction(field: "containingModelCode", action: "the model catalogue code for the containing model is invalid, please action to import row", actionType: ActionType.RESOLVE_ERROR)
                row.rowActions.add(action)
            }
        }

        if (row.parentModelCode) {
            if (!row.parentModelCode.matches(REGEX)) {
                RowAction action = new RowAction(field: "parentModelCode", action: "the model catalogue code for the parent model is invalid, please action to import row", actionType: ActionType.RESOLVE_ERROR)
                row.rowActions.add(action)
            }
        }

        if (!row.dataType) {
            RowAction action = new RowAction(field: "dataType", action: "the row does not contain a data type therefore will not be associated with a value domain, is this the expected outcome?", actionType: ActionType.DECISION)
            row.rowActions.add(action)
        }

        return roweet
    }

}
