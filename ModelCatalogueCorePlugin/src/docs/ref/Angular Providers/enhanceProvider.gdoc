h1. enhanceProvider

Configures the [enhance|Angular Services] service. You can register new enhancers using @registerEnhancerFactory(name, condition, enhancerFactory)@.
The name is the unique identifier used by @enhance.isEnhancedBy(object, name)@ and @enhance.getEnhancer(name)@ methods. the condition
is function which evaluates to true if the enhancer should be applied. The factory is [injectable|http://docs.angularjs.org/api/auto/service/$injector] function
which returns another function which accepts object to be enhanced as the first parameter and to prevent circular dependencies the [enhance|Angular Services] function as the
second parameter.
Declared in @mc.util.enhance@ module inside [mc.util|Angular Packages] package.

h2. Usage

Register new enhancer using the @registerEnhancerFactory(name, condition, enhancerFactory)@ method. After the
registration the enhancer will be used if the condition on object to enhance is met.

{code}
angular
.module('foo', ['mc.util.enhance'])
.config(function(enhanceProvider) {
    enhanceProvider.registerEnhancer('greeter',
        function(object) {
            return object.hasOwnProperty('greeting');
        }, function($log) {
            // enhance function is injected into each factory object when initialized
            var injectedEnhanceFun = this.enhance
            return function (object, enhance) {
                // allows running with enhance.getEnhancer('greeter')(object)
                // executing enhance function from the enhancer, e.g enhance(rest({...}))
                enhance = enhance || injectedEnhanceFun;
                object.greet = function() {
                    alert(object.greeting)
                };
                return object;
        }
    })
})
.factory('bar', function(enhance){
    // this will be enhanced
    var enhanced = enhance({greeting: 'Hello'});
    enhanced.greet(); // alert('Hello')
    enhance.isEnhancedBy(enhanced, 'greeter'); // true
});
{code}